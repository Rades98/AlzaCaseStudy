// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersistenceLayer.Database;

#nullable disable

namespace PersistenceLayer.Migrations
{
    [DbContext(typeof(ADbContext))]
    partial class ADbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DomainLayer.Entities.LanguageMutations.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "cs",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Čeština"
                        },
                        new
                        {
                            Id = 2,
                            Code = "en",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "English"
                        },
                        new
                        {
                            Id = 3,
                            Code = "sk",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Slovenčina"
                        },
                        new
                        {
                            Id = 4,
                            Code = "pl",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Polski"
                        },
                        new
                        {
                            Id = 5,
                            Code = "de",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Deutsch"
                        },
                        new
                        {
                            Id = 6,
                            Code = "fe",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Français"
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.LanguageMutations.MessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.LanguageMutations.MessageTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Info"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Hint"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.Localization.OrderStatusLocalizedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("OrderStatusesLocalized", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOrderEditable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            IsOrderEditable = true,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            IsOrderEditable = true,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            IsOrderEditable = false,
                            Name = "WaitingForPayment"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            IsOrderEditable = false,
                            Name = "InExpedition"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            IsOrderEditable = false,
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            IsOrderEditable = false,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.Localization.ProductCategoryLocalizedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductCategoriesLocalized", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.Localization.ProductDetailInfoLocalizedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDetailInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductDetailInfoId");

                    b.ToTable("ProductDetailInfosLocalized", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.Localization.ProductDetailLocalizedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("ProductDetailsLocalized", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentProductCategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Eshop"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Mobile devices and accessories",
                            ParentProductCategoryId = 1
                        },
                        new
                        {
                            Id = 1001,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Mobile Phones",
                            ParentProductCategoryId = 2
                        },
                        new
                        {
                            Id = 1002,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Mobile cases",
                            ParentProductCategoryId = 2
                        },
                        new
                        {
                            Id = 1003,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Mobile adapters",
                            ParentProductCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "PC and accessories",
                            ParentProductCategoryId = 1
                        },
                        new
                        {
                            Id = 2001,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Graphic cards",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 2005,
                            Created = new DateTime(2022, 9, 2, 0, 19, 31, 539, DateTimeKind.Local).AddTicks(9880),
                            Description = "",
                            Name = "Notebooks",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 2006,
                            Created = new DateTime(2022, 9, 2, 0, 19, 31, 539, DateTimeKind.Local).AddTicks(9907),
                            Description = "",
                            Name = "PCs",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 4000,
                            Created = new DateTime(2022, 9, 2, 0, 19, 31, 539, DateTimeKind.Local).AddTicks(9910),
                            Description = "",
                            Name = "Notebook adapters",
                            ParentProductCategoryId = 2005
                        },
                        new
                        {
                            Id = 4001,
                            Created = new DateTime(2022, 9, 2, 0, 19, 31, 539, DateTimeKind.Local).AddTicks(9912),
                            Description = "",
                            Name = "Notebook bags",
                            ParentProductCategoryId = 2005
                        },
                        new
                        {
                            Id = 2009,
                            Created = new DateTime(2022, 9, 2, 0, 19, 31, 539, DateTimeKind.Local).AddTicks(9914),
                            Description = "",
                            Name = "Webcams",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 2002,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Disks",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 2003,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "SSD",
                            ParentProductCategoryId = 2002
                        },
                        new
                        {
                            Id = 2004,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "HDD",
                            ParentProductCategoryId = 2002
                        },
                        new
                        {
                            Id = 2010,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Mouses",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 2012,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Monitors",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 2013,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Microphones",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 6000,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Bent monitors",
                            ParentProductCategoryId = 2012
                        },
                        new
                        {
                            Id = 2011,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Keyboards",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 5000,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Bluetooth keyboards",
                            ParentProductCategoryId = 2011
                        },
                        new
                        {
                            Id = 5001,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Gaming keyboards",
                            ParentProductCategoryId = 2011
                        },
                        new
                        {
                            Id = 2007,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Headphones",
                            ParentProductCategoryId = 3
                        },
                        new
                        {
                            Id = 3000,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Headphones with microphone",
                            ParentProductCategoryId = 2007
                        },
                        new
                        {
                            Id = 3001,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Headsets",
                            ParentProductCategoryId = 2007
                        },
                        new
                        {
                            Id = 3002,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Bluetooth headsets",
                            ParentProductCategoryId = 2007
                        },
                        new
                        {
                            Id = 3003,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Bluetooth headphones",
                            ParentProductCategoryId = 2007
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Printers and accessories",
                            ParentProductCategoryId = 1
                        },
                        new
                        {
                            Id = 7000,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Laser printers",
                            ParentProductCategoryId = 4
                        },
                        new
                        {
                            Id = 7001,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Ink printers",
                            ParentProductCategoryId = 4
                        },
                        new
                        {
                            Id = 7002,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "3D printers",
                            ParentProductCategoryId = 4
                        },
                        new
                        {
                            Id = 7003,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Tank printers",
                            ParentProductCategoryId = 4
                        },
                        new
                        {
                            Id = 7004,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Printers accessories",
                            ParentProductCategoryId = 4
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "PC chairs and accessories",
                            ParentProductCategoryId = 1
                        },
                        new
                        {
                            Id = 8000,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "Gaming chairs",
                            ParentProductCategoryId = 8001
                        },
                        new
                        {
                            Id = 8001,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Description = "",
                            Name = "PC chairs",
                            ParentProductCategoryId = 8001
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImgUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("ProductDetailInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductCode")
                        .IsUnique();

                    b.ToTable("ProductDetails", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductDetailInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId")
                        .IsUnique();

                    b.ToTable("ProductDetailInfos", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Email = "some@email.com",
                            IsActive = true,
                            Name = "Admin",
                            PasswordHash = new byte[] { 0, 160, 26, 174, 216, 87, 36, 244, 67, 159, 76, 3, 164, 80, 202, 65, 54, 153, 92, 237, 64, 247, 73, 186, 199, 173, 98, 179, 207, 204, 202, 112, 228, 97, 226, 72, 81, 252, 70, 8, 38, 64, 181, 100, 61, 198, 205, 197, 43, 44, 102, 131, 159, 248, 74, 165, 212, 237, 38, 232, 4, 187, 241, 95 },
                            PasswordSalt = new byte[] { 160, 140, 37, 170, 187, 16, 94, 136, 36, 28, 76, 111, 97, 228, 227, 62, 119, 139, 35, 84, 132, 161, 111, 167, 170, 75, 154, 105, 153, 70, 184, 26, 176, 153, 206, 217, 158, 30, 136, 217, 20, 83, 80, 127, 239, 255, 57, 29, 43, 27, 41, 53, 246, 197, 125, 229, 164, 93, 128, 58, 72, 173, 97, 66, 58, 9, 129, 74, 43, 89, 243, 49, 156, 54, 232, 30, 181, 161, 65, 255, 138, 35, 19, 110, 141, 98, 139, 44, 65, 227, 185, 249, 140, 228, 38, 40, 186, 128, 36, 224, 29, 71, 176, 154, 177, 131, 166, 9, 216, 226, 73, 92, 35, 162, 225, 235, 90, 182, 56, 153, 166, 123, 120, 165, 155, 47, 62, 129 },
                            RegistrationId = 1,
                            Surname = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserRegistrationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LinkActiveTill")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserRegistrations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "some hash haha ha ha ha haaaaaaaaaa",
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            LinkActiveTill = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 12, 17, 0, 0, 222, DateTimeKind.Local),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserRoleRelationEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleRelation");
                });

            modelBuilder.Entity("DomainLayer.Entities.LanguageMutations.MessageEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.LanguageMutations.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.LanguageMutations.MessageTypeEntity", "MessageTypeEntity")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("MessageTypeEntity");
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.Localization.OrderStatusLocalizedEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.LanguageMutations.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Orders.OrderStatusEntity", "OrderStatus")
                        .WithMany("Localizations")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Orders.OrderStatusEntity", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Users.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderItemEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Orders.OrderEntity", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Product.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.Localization.ProductCategoryLocalizedEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.LanguageMutations.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Product.ProductCategoryEntity", "ProductCategory")
                        .WithMany("Localizations")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.Localization.ProductDetailInfoLocalizedEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.LanguageMutations.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Product.ProductDetailInfoEntity", "ProductDetailInfo")
                        .WithMany("Localizations")
                        .HasForeignKey("ProductDetailInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductDetailInfo");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.Localization.ProductDetailLocalizedEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.LanguageMutations.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Product.ProductDetailEntity", "ProductDetail")
                        .WithMany("Localizations")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductCategoryEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product.ProductCategoryEntity", "ParentProductCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("ParentProductCategoryId");

                    b.Navigation("ParentProductCategory");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductDetailEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product.ProductCategoryEntity", "ProductCategory")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductDetailInfoEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product.ProductDetailEntity", "ProductDetail")
                        .WithOne("ProductDetailInfo")
                        .HasForeignKey("DomainLayer.Entities.Product.ProductDetailInfoEntity", "ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product.ProductDetailEntity", "ProductDetail")
                        .WithMany("Products")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Users.UserRegistrationEntity", "Registration")
                        .WithOne("User")
                        .HasForeignKey("DomainLayer.Entities.Users.UserEntity", "RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserRoleRelationEntity", b =>
                {
                    b.HasOne("DomainLayer.Entities.Users.UserRoleEntity", "Role")
                        .WithMany("UserRelations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Users.UserEntity", "User")
                        .WithMany("RoleRelations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Entities.LanguageMutations.MessageTypeEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DomainLayer.Entities.Orders.OrderStatusEntity", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductCategoryEntity", b =>
                {
                    b.Navigation("ChildrenCategories");

                    b.Navigation("Localizations");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductDetailEntity", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("ProductDetailInfo");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product.ProductDetailInfoEntity", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RoleRelations");
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserRegistrationEntity", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Entities.Users.UserRoleEntity", b =>
                {
                    b.Navigation("UserRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
